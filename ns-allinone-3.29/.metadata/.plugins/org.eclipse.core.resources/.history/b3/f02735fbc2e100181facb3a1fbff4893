/*
 * test of tcp-incast problem
 * 
 */
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/netanim-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/point-to-point-layout-module.h"

// Network topology (default)
//
//        n2 n3 n4              .
//         \ | /                .
//          \|/                 .
//     n1--- n0---n8(client)            .
//          /|\                 .
//         / | \                .
//        n7 n6 n5              .
//
using namespace ns3;

NS_LOG_COMPONENT_DEFINE("TcpIncast");

int main(int argc,char *argv[]){
  uint32_t nSpokes=8;
  uint32_t maxBytes=1024;
  //accept the commandLine params
  //CommandLine cmd;
  //cmd.AddValue("nSpokes","Number of nodes to place in the star",nSpokes);
  //cmd.Parse(argc,argv);
  
  //==== Build star topology
  PointToPointHelper pointToPoint;
  pointToPoint.SetDeviceAttribute("DataRate",StringValue("5Mbps"));
  pointToPoint.SetChannelAttribute("Delay",StringValue("2ms"));
  PointToPointStarHelper star(nSpokes,pointToPoint);

  //==== install internet stack on all nodes
  InternetStackHelper internet;
  star.InstallStack(internet);


  //==== assign IP Address
  star.AssignIpv4Addresses(Ipv4AddressHelper("10.1.1.0","255.255.255.0"));

  //==== create applications
  uint16_t port=50000;
  PacketSinkHelper sink("ns3::TcpSocketFactory",InetSocketAddress(Ipv4Address::GetAny(),port));
  ApplicationContainer sinkApps=sink.Install(star.GetSpokeNode(7));

  sinkApps.Start(Seconds(1.0));
  sinkApps.Stop(Seconds(10.0));

  //==== install application on spoke to create traffic
  ApplicationContainer spokeApps;
  for(uint32_t i=0;i<star.SpokeCount()-1;++i){
	  BulkSendHelper source("ns3::TcpSocketFactory",InetSocketAddress(star.GetSpokeIpv4Address(7),port));
	  source.SetAttribute("MaxBytes",UintegerValue(maxBytes));
	  spokeApps.Add(source.Install(star.GetSpokeNode(i)));
  }
spokeApps.Start(Seconds(1.0));
spokeApps.Stop(Seconds(10.0));








}
